import pandas as pd
import xlrd
from pyxlsb import open_workbook as open_xlsb

def garantir_tamanho_dataframe(df, min_linhas, min_colunas):
    """Garante que o DataFrame tenha pelo menos min_linhas e min_colunas."""
    while len(df.columns) < min_colunas:
        df[len(df.columns)] = None
    while len(df) < min_linhas:
        df.loc[len(df)] = [None] * len(df.columns)
    return df

def ler_excel(arquivo, sheet_name):
    if arquivo.endswith('.xlsb'):
        with open_xlsb(arquivo) as wb:
            with wb.get_sheet(1) as sheet:
                data = [[cell.v for cell in row] for row in sheet.rows()]
        return pd.DataFrame(data)
    else:
        workbook = xlrd.open_workbook(arquivo)
        worksheet = workbook.sheet_by_name(sheet_name)
        data = []
        for row in range(worksheet.nrows):
            data.append(worksheet.row_values(row))
        return pd.DataFrame(data)

def convert_xlsb_to_xlsx(xlsb_file):
    xlsx_file = xlsb_file.replace('.xlsb', '.xlsx')
    with open_xlsb(xlsb_file) as wb:
        with wb.get_sheet(1) as sheet:
            data = [[cell.v for cell in row] for row in sheet.rows()]
    df = pd.DataFrame(data)
    df.to_excel(xlsx_file, index=False, engine='openpyxl')
    return xlsx_file

def salvar_excel(df, arquivo, sheet_name):
    if arquivo.endswith('.xlsb'):
        arquivo = convert_xlsb_to_xlsx(arquivo)
    df.to_excel(arquivo, sheet_name=sheet_name, index=False, header=None, engine='openpyxl')

def copiar_bloco_para_destino(df_fonte, df_destino, inicio_linha_origem, fim_linha_origem, inicio_coluna_origem, fim_coluna_origem, inicio_linha_destino, inicio_coluna_destino):
    bloco_copiado = df_fonte.iloc[inicio_linha_origem:fim_linha_origem, inicio_coluna_origem:fim_coluna_origem].copy()
    print("Bloco copiado:")
    print(bloco_copiado)
    
    df_fonte.iloc[inicio_linha_origem:fim_linha_origem, inicio_coluna_origem:fim_coluna_origem] = ''
    
    # Garante que o DataFrame de destino tenha o tamanho necessário
    df_destino = garantir_tamanho_dataframe(df_destino, inicio_linha_destino + bloco_copiado.shape[0], inicio_coluna_destino + bloco_copiado.shape[1])
    
    # Copia o bloco para o df_destino
    df_destino.iloc[inicio_linha_destino:inicio_linha_destino + bloco_copiado.shape[0], inicio_coluna_destino:inicio_coluna_destino + bloco_copiado.shape[1]] = bloco_copiado.values

    print("\nDataFrame destino após colar:")
    print(df_destino)

    return df_fonte, df_destino

def main():
    arquivo_fonte = 'fonte.xlsb'  # ou 'fonte.xls'
    arquivo_destino = 'destino.xls'
    nome_da_aba_fonte = 'AJUSTE GERADOR'  
    nome_da_aba_destino = 'Faturas_Braile_-_Base (16)'  

    df_fonte = ler_excel(arquivo_fonte, nome_da_aba_fonte)
    df_destino = ler_excel(arquivo_destino, nome_da_aba_destino)

    df_fonte, df_destino = copiar_bloco_para_destino(df_fonte, df_destino, 1, 15, 0, 11, 3, 10)  # Ajustei para colar na coluna K

    salvar_excel(df_fonte, arquivo_fonte, nome_da_aba_fonte)
    salvar_excel(df_destino, arquivo_destino, nome_da_aba_destino)

if __name__ == '__main__':
    main()
