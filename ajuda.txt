import csv
import uuid
import yaml

def represent_dict_order(dumper, data):
    return dumper.represent_mapping('tag:yaml.org,2002:map', data.items(), flow_style=False)

def represent_str(dumper, data):
    if len(data.splitlines()) > 1:
        return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
    return dumper.represent_scalar('tag:yaml.org,2002:str', data)

yaml.add_representer(dict, represent_dict_order)
yaml.add_representer(str, represent_str)

def csv_to_yaml(csv_filename, yaml_filename):
    with open(csv_filename, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=';')
        
        next(csv_reader)  # Pular o cabe√ßalho
        
        familias = {}
        
        for row in csv_reader:
            documento = {
                'id': str(uuid.uuid4()),
                'enunciado': row[2],
                'descricao_detalhada': row[3],
                'observacao': row[4],
                'opcional': True if row[5].lower() == 'opcional' else False
            }
            
            familia_id = row[0]
            marcador = row[1]
            
            if familia_id not in familias:
                familias[familia_id] = {
                    'id': familia_id,
                    'marcador': marcador,
                    'documento': []
                }
            familias[familia_id]['documento'].append(documento)
        
        documentos = {'documentos': {'familia': list(familias.values())}}
        
        with open(yaml_filename, mode='w', encoding='utf-8') as yaml_file:
            yaml.dump(documentos, yaml_file, default_flow_style=False, allow_unicode=True)

csv_to_yaml('seu_arquivo.csv', 'saida.yaml')
