import csv
import uuid
import yaml

# Função personalizada para adicionar aspas em todos os valores
def quoted_string_presenter(dumper, data):
    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='"')

# Registrar a função personalizada apenas para strings
yaml.add_representer(str, quoted_string_presenter)

def csv_to_yaml(csv_filename, yaml_filename):
    with open(csv_filename, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=';')  # Especificando o delimitador
        
        # Pular o cabeçalho
        next(csv_reader)
        
        documentos = []
        
        for row in csv_reader:
            documento = {
                'id': str(uuid.uuid4()),
                'enunciado': row[2],  # Terceira coluna
                'tipo': 'DOCUMENTO',
                'tipo_resposta': 'DOCUMENTO',
                'descrição_detalhada': row[3],  # Quarta coluna
                'observacao': row[4],  # Quinta coluna
                'ativa': True,
                'oculta': False,
                'opcional': True if row[5].lower() == 'opcional' else False,  # Convertendo a string para booleano
                'familia_cobertura': row[0]  # Primeira coluna
            }
            documentos.append(documento)
        
        with open(yaml_filename, mode='w', encoding='utf-8') as yaml_file:
            yaml.dump({'documentos': documentos}, yaml_file, default_flow_style=False, allow_unicode=True)

# Exemplo de uso:
csv_to_yaml('seu_arquivo.csv', 'saida.yaml')
